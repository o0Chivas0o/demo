{"version":3,"sources":["../../../node_modules/validate-npm-package-license/index.js"],"names":["parse","require","correct","genericWarning","fileReferenceRE","startsWith","prefix","string","slice","length","usesLicenseRef","ast","hasOwnProperty","license","left","right","module","exports","argument","e","match","validForOldPackages","validForNewPackages","unlicensed","exec","inFile","result","warnings","corrected","push","spdx"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,uBAAR,CAAZ;AACA,IAAIC,UAAUD,QAAQ,cAAR,CAAd;;AAEA,IAAIE,iBACF,uBACA,0DADA,GAEA,mBAFA,GAGA,6BAJF;;AAOA,IAAIC,kBAAkB,0BAAtB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,SAAOA,OAAOC,KAAP,CAAa,CAAb,EAAgBF,OAAOG,MAAvB,MAAmCH,MAA1C;AACD;;AAED,SAASI,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIA,IAAIC,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,QAAIC,UAAUF,IAAIE,OAAlB;AACA,WACER,WAAW,YAAX,EAAyBQ,OAAzB,KACAR,WAAW,aAAX,EAA0BQ,OAA1B,CAFF;AAID,GAND,MAMO;AACL,WACEH,eAAeC,IAAIG,IAAnB,KACAJ,eAAeC,IAAII,KAAnB,CAFF;AAID;AACF;;AAEDC,OAAOC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AAClC,MAAIP,GAAJ;;AAEA,MAAI;AACFA,UAAMX,MAAMkB,QAAN,CAAN;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,QAAIC,KAAJ;AACA,QACEF,aAAa,YAAb,IACAA,aAAa,YAFf,EAGE;AACA,aAAO;AACLG,6BAAqB,IADhB;AAELC,6BAAqB,IAFhB;AAGLC,oBAAY;AAHP,OAAP;AAKD,KATD,MASO,IAAIH,QAAQhB,gBAAgBoB,IAAhB,CAAqBN,QAArB,CAAZ,EAA4C;AACjD,aAAO;AACLG,6BAAqB,IADhB;AAELC,6BAAqB,IAFhB;AAGLG,gBAAQL,MAAM,CAAN;AAHH,OAAP;AAKD,KANM,MAMA;AACL,UAAIM,SAAS;AACXL,6BAAqB,KADV;AAEXC,6BAAqB,KAFV;AAGXK,kBAAU,CAACxB,cAAD;AAHC,OAAb;AAKA,UAAIyB,YAAY1B,QAAQgB,QAAR,CAAhB;AACA,UAAIU,SAAJ,EAAe;AACbF,eAAOC,QAAP,CAAgBE,IAAhB,CACE,iDAAiDD,SAAjD,GAA6D,GAD/D;AAGD;AACD,aAAOF,MAAP;AACD;AACF;;AAED,MAAIhB,eAAeC,GAAf,CAAJ,EAAyB;AACvB,WAAO;AACLW,2BAAqB,KADhB;AAELD,2BAAqB,KAFhB;AAGLS,YAAM,IAHD;AAILH,gBAAU,CAACxB,cAAD;AAJL,KAAP;AAMD,GAPD,MAOO;AACL,WAAO;AACLmB,2BAAqB,IADhB;AAELD,2BAAqB,IAFhB;AAGLS,YAAM;AAHD,KAAP;AAKD;AACF,CApDD","file":"index.js","sourcesContent":["var parse = require('spdx-expression-parse');\nvar correct = require('spdx-correct');\n\nvar genericWarning = (\n  'license should be ' +\n  'a valid SPDX license expression (without \"LicenseRef\"), ' +\n  '\"UNLICENSED\", or ' +\n  '\"SEE LICENSE IN <filename>\"'\n);\n\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return (\n      startsWith('LicenseRef', license) ||\n      startsWith('DocumentRef', license)\n    );\n  } else {\n    return (\n      usesLicenseRef(ast.left) ||\n      usesLicenseRef(ast.right)\n    );\n  }\n}\n\nmodule.exports = function(argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match\n    if (\n      argument === 'UNLICENSED' ||\n      argument === 'UNLICENCED'\n    ) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n      var corrected = correct(argument);\n      if (corrected) {\n        result.warnings.push(\n          'license is similar to the valid expression \"' + corrected + '\"'\n        );\n      }\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};\n"]}