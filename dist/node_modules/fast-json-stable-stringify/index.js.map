{"version":3,"sources":["../../../node_modules/fast-json-stable-stringify/index.js"],"names":["module","exports","data","opts","cmp","cycles","f","node","a","b","aobj","key","value","bobj","seen","stringify","toJSON","undefined","isFinite","JSON","i","out","Array","isArray","length","indexOf","TypeError","seenIndex","push","keys","Object","sort","splice"],"mappings":"AAAA;;;;AAEAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnC,QAAI,CAACA,IAAL,EAAWA,OAAO,EAAP;AACX,QAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgCA,OAAO,EAAEC,KAAKD,IAAP,EAAP;AAChC,QAAIE,SAAU,OAAOF,KAAKE,MAAZ,KAAuB,SAAxB,GAAqCF,KAAKE,MAA1C,GAAmD,KAAhE;;AAEA,QAAID,MAAMD,KAAKC,GAAL,IAAa,UAAUE,CAAV,EAAa;AAChC,eAAO,UAAUC,IAAV,EAAgB;AACnB,mBAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACnB,oBAAIC,OAAO,EAAEC,KAAKH,CAAP,EAAUI,OAAOL,KAAKC,CAAL,CAAjB,EAAX;AACA,oBAAIK,OAAO,EAAEF,KAAKF,CAAP,EAAUG,OAAOL,KAAKE,CAAL,CAAjB,EAAX;AACA,uBAAOH,EAAEI,IAAF,EAAQG,IAAR,CAAP;AACH,aAJD;AAKH,SAND;AAOH,KARqB,CAQnBV,KAAKC,GARc,CAAtB;;AAUA,QAAIU,OAAO,EAAX;AACA,WAAQ,SAASC,SAAT,CAAoBR,IAApB,EAA0B;AAC9B,YAAIA,QAAQA,KAAKS,MAAb,IAAuB,OAAOT,KAAKS,MAAZ,KAAuB,UAAlD,EAA8D;AAC1DT,mBAAOA,KAAKS,MAAL,EAAP;AACH;;AAED,YAAIT,SAASU,SAAb,EAAwB;AACxB,YAAI,OAAOV,IAAP,IAAe,QAAnB,EAA6B,OAAOW,SAASX,IAAT,IAAiB,KAAKA,IAAtB,GAA6B,MAApC;AAC7B,YAAI,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B,OAAOY,KAAKJ,SAAL,CAAeR,IAAf,CAAP;;AAE9B,YAAIa,CAAJ,EAAOC,GAAP;AACA,YAAIC,MAAMC,OAAN,CAAchB,IAAd,CAAJ,EAAyB;AACrBc,kBAAM,GAAN;AACA,iBAAKD,IAAI,CAAT,EAAYA,IAAIb,KAAKiB,MAArB,EAA6BJ,GAA7B,EAAkC;AAC9B,oBAAIA,CAAJ,EAAOC,OAAO,GAAP;AACPA,uBAAON,UAAUR,KAAKa,CAAL,CAAV,KAAsB,MAA7B;AACH;AACD,mBAAOC,MAAM,GAAb;AACH;;AAED,YAAId,SAAS,IAAb,EAAmB,OAAO,MAAP;;AAEnB,YAAIO,KAAKW,OAAL,CAAalB,IAAb,MAAuB,CAAC,CAA5B,EAA+B;AAC3B,gBAAIF,MAAJ,EAAY,OAAOc,KAAKJ,SAAL,CAAe,WAAf,CAAP;AACZ,kBAAM,IAAIW,SAAJ,CAAc,uCAAd,CAAN;AACH;;AAED,YAAIC,YAAYb,KAAKc,IAAL,CAAUrB,IAAV,IAAkB,CAAlC;AACA,YAAIsB,OAAOC,OAAOD,IAAP,CAAYtB,IAAZ,EAAkBwB,IAAlB,CAAuB3B,OAAOA,IAAIG,IAAJ,CAA9B,CAAX;AACAc,cAAM,EAAN;AACA,aAAKD,IAAI,CAAT,EAAYA,IAAIS,KAAKL,MAArB,EAA6BJ,GAA7B,EAAkC;AAC9B,gBAAIT,MAAMkB,KAAKT,CAAL,CAAV;AACA,gBAAIR,QAAQG,UAAUR,KAAKI,GAAL,CAAV,CAAZ;;AAEA,gBAAI,CAACC,KAAL,EAAY;AACZ,gBAAIS,GAAJ,EAASA,OAAO,GAAP;AACTA,mBAAOF,KAAKJ,SAAL,CAAeJ,GAAf,IAAsB,GAAtB,GAA4BC,KAAnC;AACH;AACDE,aAAKkB,MAAL,CAAYL,SAAZ,EAAuB,CAAvB;AACA,eAAO,MAAMN,GAAN,GAAY,GAAnB;AACH,KAvCM,CAuCJnB,IAvCI,CAAP;AAwCH,CAxDD","file":"index.js","sourcesContent":["'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n"]}